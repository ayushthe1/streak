version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  
  db:
    image:  postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
    # ports:
    #   - 5432:5432
    volumes:
      - ${HOME}/data/postgresdata:/var/lib/postgresql/data 
        

  redis-db:
    image:  redis
    restart: always
    # ports:
    #   - 6379:6379

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.24.20
    restart: on-failure:0
    volumes:
      - ${HOME}/data/weaviate:/var/lib/weaviate
    ports:
     - 8080:8080
     - 50051:50051
    environment:
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: "./data"
      ENABLE_MODULES: 'text2vec-transformers,generative-ollama'
      DEFAULT_VECTORIZER_MODULE: text2vec-transformers
      TRANSFORMERS_INFERENCE_API: http://t2v-transformers:8080
      CLUSTER_HOSTNAME: 'node1'
  t2v-transformers:  # Set the name of the inference container
    image: cr.weaviate.io/semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1
    environment:
      ENABLE_CUDA: 0 # set to 1 to enable
  # qna-transformers:
  #   image: cr.weaviate.io/semitechnologies/qna-transformers:bert-large-uncased-whole-word-masking-finetuned-squad
  #   environment:
  #     ENABLE_CUDA: 0
  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   container_name: rabbitmq
  #   hostname: rabbitmq
  #   ports:
  #     - 5672:5672   # for sender and consumer connections
  #     - 15672:15672 # for serve RabbitMQ GUI
  #   volumes:
  #     - ${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq
  #     - ${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq
  #   restart: always


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    extra_hosts:
      - "host.docker.internal:host-gateway"
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3003:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

  go-app:
    build:
      context: ./
      dockerfile: backend.dockerfile
    restart: always
    ports:
      - 3000:3000
      - 3001:3001
    depends_on:
      - rabbitmq
      - db
      - redis-db
      - weaviate
      - kafka

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672   # for sender and consumer connections
      - 15672:15672 # for serve RabbitMQ GUI
    volumes:
      - ${HOME}/data/rabbitmq/data/:/var/lib/rabbitmq
      - ${HOME}/data/rabbitmq/log/:/var/log/rabbitmq
    restart: always

  frontend:
    restart: always
    build:
      context: ./
      dockerfile: frontend.dockerfile
    ports:
      - 4000:4000

  caddy:
    image: caddy
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile


volumes:
  grafana-storage: